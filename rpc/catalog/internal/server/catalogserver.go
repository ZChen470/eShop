// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: catalog.proto

package server

import (
	"context"

	"github.com/ZChen470/eShop/rpc/catalog/catalog"
	"github.com/ZChen470/eShop/rpc/catalog/internal/logic"
	"github.com/ZChen470/eShop/rpc/catalog/internal/svc"
)

type CatalogServer struct {
	svcCtx *svc.ServiceContext
	catalog.UnimplementedCatalogServer
}

func NewCatalogServer(svcCtx *svc.ServiceContext) *CatalogServer {
	return &CatalogServer{
		svcCtx: svcCtx,
	}
}

func (s *CatalogServer) GetProducts(ctx context.Context, in *catalog.GetProductsReq) (*catalog.GetProductsResp, error) {
	l := logic.NewGetProductsLogic(ctx, s.svcCtx)
	return l.GetProducts(in)
}

func (s *CatalogServer) GetProductDetail(ctx context.Context, in *catalog.GetProductDetailReq) (*catalog.GetProductDetailResp, error) {
	l := logic.NewGetProductDetailLogic(ctx, s.svcCtx)
	return l.GetProductDetail(in)
}

func (s *CatalogServer) GetInventory(ctx context.Context, in *catalog.GetInventoryReq) (*catalog.GetInventoryResp, error) {
	l := logic.NewGetInventoryLogic(ctx, s.svcCtx)
	return l.GetInventory(in)
}

func (s *CatalogServer) CreateProduct(ctx context.Context, in *catalog.CreateProductReq) (*catalog.CreateProductResp, error) {
	l := logic.NewCreateProductLogic(ctx, s.svcCtx)
	return l.CreateProduct(in)
}

func (s *CatalogServer) UpdateProduct(ctx context.Context, in *catalog.UpdateProductReq) (*catalog.UpdateProductResp, error) {
	l := logic.NewUpdateProductLogic(ctx, s.svcCtx)
	return l.UpdateProduct(in)
}

func (s *CatalogServer) DeleteProduct(ctx context.Context, in *catalog.DeleteProductReq) (*catalog.DeleteProductResp, error) {
	l := logic.NewDeleteProductLogic(ctx, s.svcCtx)
	return l.DeleteProduct(in)
}

func (s *CatalogServer) SemanticSearch(ctx context.Context, in *catalog.SemanticSearchReq) (*catalog.SemanticSearchResp, error) {
	l := logic.NewSemanticSearchLogic(ctx, s.svcCtx)
	return l.SemanticSearch(in)
}
