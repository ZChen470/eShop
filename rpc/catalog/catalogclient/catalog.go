// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: catalog.proto

package catalogclient

import (
	"context"

	"github.com/ZChen470/eShop/rpc/catalog/catalog"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductReq     = catalog.CreateProductReq
	CreateProductResp    = catalog.CreateProductResp
	DeleteProductReq     = catalog.DeleteProductReq
	DeleteProductResp    = catalog.DeleteProductResp
	GetInventoryReq      = catalog.GetInventoryReq
	GetInventoryResp     = catalog.GetInventoryResp
	GetProductDetailReq  = catalog.GetProductDetailReq
	GetProductDetailResp = catalog.GetProductDetailResp
	GetProductsReq       = catalog.GetProductsReq
	GetProductsResp      = catalog.GetProductsResp
	Product              = catalog.Product
	SemanticSearchReq    = catalog.SemanticSearchReq
	SemanticSearchResp   = catalog.SemanticSearchResp
	UpdateProductReq     = catalog.UpdateProductReq
	UpdateProductResp    = catalog.UpdateProductResp

	Catalog interface {
		GetProducts(ctx context.Context, in *GetProductsReq, opts ...grpc.CallOption) (*GetProductsResp, error)
		GetProductDetail(ctx context.Context, in *GetProductDetailReq, opts ...grpc.CallOption) (*GetProductDetailResp, error)
		GetInventory(ctx context.Context, in *GetInventoryReq, opts ...grpc.CallOption) (*GetInventoryResp, error)
		CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error)
		UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error)
		DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error)
		SemanticSearch(ctx context.Context, in *SemanticSearchReq, opts ...grpc.CallOption) (*SemanticSearchResp, error)
	}

	defaultCatalog struct {
		cli zrpc.Client
	}
)

func NewCatalog(cli zrpc.Client) Catalog {
	return &defaultCatalog{
		cli: cli,
	}
}

func (m *defaultCatalog) GetProducts(ctx context.Context, in *GetProductsReq, opts ...grpc.CallOption) (*GetProductsResp, error) {
	client := catalog.NewCatalogClient(m.cli.Conn())
	return client.GetProducts(ctx, in, opts...)
}

func (m *defaultCatalog) GetProductDetail(ctx context.Context, in *GetProductDetailReq, opts ...grpc.CallOption) (*GetProductDetailResp, error) {
	client := catalog.NewCatalogClient(m.cli.Conn())
	return client.GetProductDetail(ctx, in, opts...)
}

func (m *defaultCatalog) GetInventory(ctx context.Context, in *GetInventoryReq, opts ...grpc.CallOption) (*GetInventoryResp, error) {
	client := catalog.NewCatalogClient(m.cli.Conn())
	return client.GetInventory(ctx, in, opts...)
}

func (m *defaultCatalog) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error) {
	client := catalog.NewCatalogClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

func (m *defaultCatalog) UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error) {
	client := catalog.NewCatalogClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}

func (m *defaultCatalog) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error) {
	client := catalog.NewCatalogClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}

func (m *defaultCatalog) SemanticSearch(ctx context.Context, in *SemanticSearchReq, opts ...grpc.CallOption) (*SemanticSearchResp, error) {
	client := catalog.NewCatalogClient(m.cli.Conn())
	return client.SemanticSearch(ctx, in, opts...)
}
