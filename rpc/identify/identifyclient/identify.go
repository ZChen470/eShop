// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: identify.proto

package identifyclient

import (
	"context"

	"github.com/ZChen470/eShop/rpc/identify/identify"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommonResp       = identify.CommonResp
	GetProfileReq    = identify.GetProfileReq
	LoginReq         = identify.LoginReq
	LoginResp        = identify.LoginResp
	RegisterReq      = identify.RegisterReq
	UpdateProfileReq = identify.UpdateProfileReq
	UserProfile      = identify.UserProfile

	Identify interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*CommonResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetProfile(ctx context.Context, in *GetProfileReq, opts ...grpc.CallOption) (*UserProfile, error)
		UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*CommonResp, error)
	}

	defaultIdentify struct {
		cli zrpc.Client
	}
)

func NewIdentify(cli zrpc.Client) Identify {
	return &defaultIdentify{
		cli: cli,
	}
}

func (m *defaultIdentify) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := identify.NewIdentifyClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultIdentify) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := identify.NewIdentifyClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultIdentify) GetProfile(ctx context.Context, in *GetProfileReq, opts ...grpc.CallOption) (*UserProfile, error) {
	client := identify.NewIdentifyClient(m.cli.Conn())
	return client.GetProfile(ctx, in, opts...)
}

func (m *defaultIdentify) UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := identify.NewIdentifyClient(m.cli.Conn())
	return client.UpdateProfile(ctx, in, opts...)
}
