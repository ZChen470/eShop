// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: basket.proto

package basket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Basket_GetCart_FullMethodName    = "/basket.Basket/GetCart"
	Basket_AddItem_FullMethodName    = "/basket.Basket/AddItem"
	Basket_UpdateItem_FullMethodName = "/basket.Basket/UpdateItem"
	Basket_DeleteItem_FullMethodName = "/basket.Basket/DeleteItem"
	Basket_ClearCart_FullMethodName  = "/basket.Basket/ClearCart"
)

// BasketClient is the client API for Basket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasketClient interface {
	GetCart(ctx context.Context, in *GetCartReq, opts ...grpc.CallOption) (*GetCartResp, error)
	AddItem(ctx context.Context, in *AddItemReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*CommonResp, error)
	ClearCart(ctx context.Context, in *ClearCartReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type basketClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketClient(cc grpc.ClientConnInterface) BasketClient {
	return &basketClient{cc}
}

func (c *basketClient) GetCart(ctx context.Context, in *GetCartReq, opts ...grpc.CallOption) (*GetCartResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartResp)
	err := c.cc.Invoke(ctx, Basket_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) AddItem(ctx context.Context, in *AddItemReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Basket_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Basket_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Basket_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) ClearCart(ctx context.Context, in *ClearCartReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Basket_ClearCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketServer is the server API for Basket service.
// All implementations must embed UnimplementedBasketServer
// for forward compatibility.
type BasketServer interface {
	GetCart(context.Context, *GetCartReq) (*GetCartResp, error)
	AddItem(context.Context, *AddItemReq) (*CommonResp, error)
	UpdateItem(context.Context, *UpdateItemReq) (*CommonResp, error)
	DeleteItem(context.Context, *DeleteItemReq) (*CommonResp, error)
	ClearCart(context.Context, *ClearCartReq) (*CommonResp, error)
	mustEmbedUnimplementedBasketServer()
}

// UnimplementedBasketServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasketServer struct{}

func (UnimplementedBasketServer) GetCart(context.Context, *GetCartReq) (*GetCartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedBasketServer) AddItem(context.Context, *AddItemReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedBasketServer) UpdateItem(context.Context, *UpdateItemReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedBasketServer) DeleteItem(context.Context, *DeleteItemReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedBasketServer) ClearCart(context.Context, *ClearCartReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCart not implemented")
}
func (UnimplementedBasketServer) mustEmbedUnimplementedBasketServer() {}
func (UnimplementedBasketServer) testEmbeddedByValue()                {}

// UnsafeBasketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketServer will
// result in compilation errors.
type UnsafeBasketServer interface {
	mustEmbedUnimplementedBasketServer()
}

func RegisterBasketServer(s grpc.ServiceRegistrar, srv BasketServer) {
	// If the following call pancis, it indicates UnimplementedBasketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Basket_ServiceDesc, srv)
}

func _Basket_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basket_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).GetCart(ctx, req.(*GetCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basket_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).AddItem(ctx, req.(*AddItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basket_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).UpdateItem(ctx, req.(*UpdateItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basket_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).DeleteItem(ctx, req.(*DeleteItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_ClearCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).ClearCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basket_ClearCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).ClearCart(ctx, req.(*ClearCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Basket_ServiceDesc is the grpc.ServiceDesc for Basket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Basket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basket.Basket",
	HandlerType: (*BasketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCart",
			Handler:    _Basket_GetCart_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _Basket_AddItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _Basket_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _Basket_DeleteItem_Handler,
		},
		{
			MethodName: "ClearCart",
			Handler:    _Basket_ClearCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basket.proto",
}
