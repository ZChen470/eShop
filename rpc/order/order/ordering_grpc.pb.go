// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: ordering.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ordering_PlaceOrder_FullMethodName        = "/order.Ordering/PlaceOrder"
	Ordering_GetOrderList_FullMethodName      = "/order.Ordering/GetOrderList"
	Ordering_GetOrderDetail_FullMethodName    = "/order.Ordering/GetOrderDetail"
	Ordering_CancelOrder_FullMethodName       = "/order.Ordering/CancelOrder"
	Ordering_UpdateOrderStatus_FullMethodName = "/order.Ordering/UpdateOrderStatus"
	Ordering_CheckOutOrder_FullMethodName     = "/order.Ordering/CheckOutOrder"
)

// OrderingClient is the client API for Ordering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderingClient interface {
	PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PlaceOrderResp, error)
	GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error)
	GetOrderDetail(ctx context.Context, in *GetOrderDetailReq, opts ...grpc.CallOption) (*GetOrderDetailResp, error)
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*CommonResp, error)
	CheckOutOrder(ctx context.Context, in *CheckOutOrderReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type orderingClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderingClient(cc grpc.ClientConnInterface) OrderingClient {
	return &orderingClient{cc}
}

func (c *orderingClient) PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PlaceOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceOrderResp)
	err := c.cc.Invoke(ctx, Ordering_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderListResp)
	err := c.cc.Invoke(ctx, Ordering_GetOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) GetOrderDetail(ctx context.Context, in *GetOrderDetailReq, opts ...grpc.CallOption) (*GetOrderDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderDetailResp)
	err := c.cc.Invoke(ctx, Ordering_GetOrderDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Ordering_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Ordering_UpdateOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderingClient) CheckOutOrder(ctx context.Context, in *CheckOutOrderReq, opts ...grpc.CallOption) (*CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, Ordering_CheckOutOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderingServer is the server API for Ordering service.
// All implementations must embed UnimplementedOrderingServer
// for forward compatibility.
type OrderingServer interface {
	PlaceOrder(context.Context, *PlaceOrderReq) (*PlaceOrderResp, error)
	GetOrderList(context.Context, *GetOrderListReq) (*GetOrderListResp, error)
	GetOrderDetail(context.Context, *GetOrderDetailReq) (*GetOrderDetailResp, error)
	CancelOrder(context.Context, *CancelOrderReq) (*CommonResp, error)
	UpdateOrderStatus(context.Context, *UpdateOrderStatusReq) (*CommonResp, error)
	CheckOutOrder(context.Context, *CheckOutOrderReq) (*CommonResp, error)
	mustEmbedUnimplementedOrderingServer()
}

// UnimplementedOrderingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderingServer struct{}

func (UnimplementedOrderingServer) PlaceOrder(context.Context, *PlaceOrderReq) (*PlaceOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedOrderingServer) GetOrderList(context.Context, *GetOrderListReq) (*GetOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedOrderingServer) GetOrderDetail(context.Context, *GetOrderDetailReq) (*GetOrderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderDetail not implemented")
}
func (UnimplementedOrderingServer) CancelOrder(context.Context, *CancelOrderReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderingServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedOrderingServer) CheckOutOrder(context.Context, *CheckOutOrderReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOutOrder not implemented")
}
func (UnimplementedOrderingServer) mustEmbedUnimplementedOrderingServer() {}
func (UnimplementedOrderingServer) testEmbeddedByValue()                  {}

// UnsafeOrderingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderingServer will
// result in compilation errors.
type UnsafeOrderingServer interface {
	mustEmbedUnimplementedOrderingServer()
}

func RegisterOrderingServer(s grpc.ServiceRegistrar, srv OrderingServer) {
	// If the following call pancis, it indicates UnimplementedOrderingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ordering_ServiceDesc, srv)
}

func _Ordering_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordering_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).PlaceOrder(ctx, req.(*PlaceOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordering_GetOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).GetOrderList(ctx, req.(*GetOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_GetOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).GetOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordering_GetOrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).GetOrderDetail(ctx, req.(*GetOrderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordering_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordering_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordering_CheckOutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOutOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderingServer).CheckOutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordering_CheckOutOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderingServer).CheckOutOrder(ctx, req.(*CheckOutOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ordering_ServiceDesc is the grpc.ServiceDesc for Ordering service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ordering_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.Ordering",
	HandlerType: (*OrderingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _Ordering_PlaceOrder_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _Ordering_GetOrderList_Handler,
		},
		{
			MethodName: "GetOrderDetail",
			Handler:    _Ordering_GetOrderDetail_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Ordering_CancelOrder_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _Ordering_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "CheckOutOrder",
			Handler:    _Ordering_CheckOutOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ordering.proto",
}
