// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: ordering.proto

package server

import (
	"context"

	"github.com/ZChen470/eShop/rpc/order/internal/logic"
	"github.com/ZChen470/eShop/rpc/order/internal/svc"
	"github.com/ZChen470/eShop/rpc/order/order"
)

type OrderingServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderingServer
}

func NewOrderingServer(svcCtx *svc.ServiceContext) *OrderingServer {
	return &OrderingServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderingServer) PlaceOrder(ctx context.Context, in *order.PlaceOrderReq) (*order.PlaceOrderResp, error) {
	l := logic.NewPlaceOrderLogic(ctx, s.svcCtx)
	return l.PlaceOrder(in)
}

func (s *OrderingServer) GetOrderList(ctx context.Context, in *order.GetOrderListReq) (*order.GetOrderListResp, error) {
	l := logic.NewGetOrderListLogic(ctx, s.svcCtx)
	return l.GetOrderList(in)
}

func (s *OrderingServer) GetOrderDetail(ctx context.Context, in *order.GetOrderDetailReq) (*order.GetOrderDetailResp, error) {
	l := logic.NewGetOrderDetailLogic(ctx, s.svcCtx)
	return l.GetOrderDetail(in)
}

func (s *OrderingServer) CancelOrder(ctx context.Context, in *order.CancelOrderReq) (*order.CommonResp, error) {
	l := logic.NewCancelOrderLogic(ctx, s.svcCtx)
	return l.CancelOrder(in)
}

func (s *OrderingServer) UpdateOrderStatus(ctx context.Context, in *order.UpdateOrderStatusReq) (*order.CommonResp, error) {
	l := logic.NewUpdateOrderStatusLogic(ctx, s.svcCtx)
	return l.UpdateOrderStatus(in)
}

func (s *OrderingServer) CheckOutOrder(ctx context.Context, in *order.CheckOutOrderReq) (*order.CommonResp, error) {
	l := logic.NewCheckOutOrderLogic(ctx, s.svcCtx)
	return l.CheckOutOrder(in)
}
