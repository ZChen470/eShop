// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: ordering.proto

package ordering

import (
	"context"

	"github.com/ZChen470/eShop/rpc/order/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CancelOrderReq       = order.CancelOrderReq
	CheckOutOrderReq     = order.CheckOutOrderReq
	CommonResp           = order.CommonResp
	GetOrderDetailReq    = order.GetOrderDetailReq
	GetOrderDetailResp   = order.GetOrderDetailResp
	GetOrderListReq      = order.GetOrderListReq
	GetOrderListResp     = order.GetOrderListResp
	Order                = order.Order
	OrderItem            = order.OrderItem
	OrderProfile         = order.OrderProfile
	PlaceOrderReq        = order.PlaceOrderReq
	PlaceOrderResp       = order.PlaceOrderResp
	UpdateOrderStatusReq = order.UpdateOrderStatusReq

	Ordering interface {
		PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PlaceOrderResp, error)
		GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error)
		GetOrderDetail(ctx context.Context, in *GetOrderDetailReq, opts ...grpc.CallOption) (*GetOrderDetailResp, error)
		CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CommonResp, error)
		UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*CommonResp, error)
		CheckOutOrder(ctx context.Context, in *CheckOutOrderReq, opts ...grpc.CallOption) (*CommonResp, error)
	}

	defaultOrdering struct {
		cli zrpc.Client
	}
)

func NewOrdering(cli zrpc.Client) Ordering {
	return &defaultOrdering{
		cli: cli,
	}
}

func (m *defaultOrdering) PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PlaceOrderResp, error) {
	client := order.NewOrderingClient(m.cli.Conn())
	return client.PlaceOrder(ctx, in, opts...)
}

func (m *defaultOrdering) GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error) {
	client := order.NewOrderingClient(m.cli.Conn())
	return client.GetOrderList(ctx, in, opts...)
}

func (m *defaultOrdering) GetOrderDetail(ctx context.Context, in *GetOrderDetailReq, opts ...grpc.CallOption) (*GetOrderDetailResp, error) {
	client := order.NewOrderingClient(m.cli.Conn())
	return client.GetOrderDetail(ctx, in, opts...)
}

func (m *defaultOrdering) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := order.NewOrderingClient(m.cli.Conn())
	return client.CancelOrder(ctx, in, opts...)
}

func (m *defaultOrdering) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := order.NewOrderingClient(m.cli.Conn())
	return client.UpdateOrderStatus(ctx, in, opts...)
}

func (m *defaultOrdering) CheckOutOrder(ctx context.Context, in *CheckOutOrderReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := order.NewOrderingClient(m.cli.Conn())
	return client.CheckOutOrder(ctx, in, opts...)
}
