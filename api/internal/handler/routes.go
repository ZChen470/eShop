// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package handler

import (
	"net/http"

	Basket "github.com/ZChen470/eShop/api/internal/handler/Basket"
	Catalog "github.com/ZChen470/eShop/api/internal/handler/Catalog"
	Identity "github.com/ZChen470/eShop/api/internal/handler/Identity"
	Ordering "github.com/ZChen470/eShop/api/internal/handler/Ordering"
	"github.com/ZChen470/eShop/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/cart",
				Handler: Basket.GetCartHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/cart",
				Handler: Basket.ClearCartHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cart/item",
				Handler: Basket.AddItemHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/cart/item",
				Handler: Basket.UpdateItemHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/cart/item",
				Handler: Basket.DeleteItemHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/basket/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/products",
				Handler: Catalog.GetProductsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/products",
				Handler: Catalog.CreateProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/products",
				Handler: Catalog.UpdateProductHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/products",
				Handler: Catalog.DeleteProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/products/detail",
				Handler: Catalog.GetProductDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/products/inventory",
				Handler: Catalog.GetInventoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/products/search",
				Handler: Catalog.SemanticSearchHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/catalog/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: Identity.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/me",
				Handler: Identity.GetProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/me",
				Handler: Identity.UpdateProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: Identity.RegisterHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/identity/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/orders",
				Handler: Ordering.PlaceOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/orders",
				Handler: Ordering.GetOrderListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/orders",
				Handler: Ordering.GetOrderDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orders/cancel",
				Handler: Ordering.CancelOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orders/checkout",
				Handler: Ordering.CheckOutOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/orders/update",
				Handler: Ordering.UpdateOrderStatusReqHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/order/v1"),
	)
}
